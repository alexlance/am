#!/bin/bash

# Global vars
RED='\033[0;31m'
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
NC='\033[0m'

# Help message
aws_usage="
${ORANGE}NAME${NC}
      awsmetrics - DEATH TO THE AWS CONSOLE!!!

${ORANGE}SYNOPSIS${NC}
        awsmetrics [options...] <parameters>

      Use the awsmetrics command so you dont have to remember all the stupid aws 
      cli parameters to get basic information about instances and go through all
      the man pages, there is so much. Hopefully this makes your life a little 
      easier.

      All the following searches will add wildcards on either side of the string
      implicintly, for example: ${ORANGE}awsmetrics -a *instancename*${NC}

      There is no need to add the wildcard yourself this is already done within
      the application. This was just to show how the search is really done.

${ORANGE}OPTIONS${NC}
      ${ORANGE}-i, --instance-ip${NC} <instance-name>
          Show the ip addresses of the instance you search for. The private ip
          will be shown by default.

      ${ORANGE}-I, --instance-info${NC} <instance-name>
          Provide the following information of the instance you have specified:

            o AvailabilityZone
            o PrivateIpAddress
            o InstanceId
            o Name 

      ${ORANGE}-t, --instance-type${NC} <instance-type>
          Optionally provide an instance type to narrow down searches further.
          By default if this option isn't selected it will just search all
          instance types.

      ${ORANGE}-a, --asg-count${NC} <asg-name>
          Get the current instance count of an auto-scaling group.

      ${ORANGE}-A, --asg-info${NC} <asg-name>
          Provide the following information of an auto-scaling group:

            o AvailabilityZone
            o HealthStatus
            o InstanceId
            o State

      ${ORANGE}-s, --ssh${NC} <instance-name>
          Provide a select option of instances that can be ssh'd to.

      ${ORANGE}-o, --output${NC} <style>
          Formatting style for output:

            o json (default)
            o text
            o table

      ${ORANGE}-h, --help${NC}
          Display help, duh....can't believe this is even required."

# aws functions - the titles speak for themselves
function get_asg_exists () {
  aws autoscaling describe-auto-scaling-groups --query \
  'AutoScalingGroups[].{ASG:AutoScalingGroupName}' --output text | \
  { grep $1 || true; } | wc -l
}

function get_asg_instance_count () {
  aws autoscaling describe-auto-scaling-groups --query \
  'AutoScalingGroups[].{ASG:AutoScalingGroupName,DES:DesiredCapacity,LC:LaunchConfigurationName}' \
  --output text | { grep $1 || true; } | { grep $2 || true; } | awk '{print $4}'
}

function get_asg_lc_name () {
  aws autoscaling describe-auto-scaling-groups --query \
  'AutoScalingGroups[].{ASG:AutoScalingGroupName,LC:LaunchConfigurationName}' \
  --output text | { grep -i $1 || true; } | awk '{print $4}'
}

function get_asg_image_id () {
  aws autoscaling describe-launch-configurations --launch-configuration-names $1 \
  --query 'LaunchConfigurations[]. ImageId' --output text
}

function get_elb_health () {
  aws elb describe-instance-health --load-balancer-name $1 \
  --query 'InstanceStates[].[State]' --output text | \
  { grep -i 'OutOfService' || true; } | wc -l
}

function get_instance_ips () {
  aws ec2 describe-instances \
  --filters "Name=tag:Name,Values=*${1}*" "Name=instance-state-code,Values=16" \
  --query 'Reservations[].Instances[].[ PrivateIpAddress ]' --output ${2}
}

function get_instance_info () {
  aws ec2 describe-instances \
  --filters "Name=tag:Name,Values=*${1}*" "Name=instance-state-code,Values=16" \
  "Name=instance-type,Values=${3}" \
  --query "Reservations[*].Instances[*].{Name:Tags[?Key=='Name'] \
  | [0].Value, InstanceId: InstanceId, IP: PrivateIpAddress, \
  InstanceType:InstanceType, AZ: Placement.AvailabilityZone}" \
  --output ${2}
}

function get_asg_name () {
  aws autoscaling describe-auto-scaling-groups --query \
  'AutoScalingGroups[].{ASG:AutoScalingGroupName}' \
  --output text | grep ${1}
}

function get_asg_info () {
  aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name \
  "$(get_asg_name ${1})" --query "AutoScalingGroups[].Instances[]. \
  {InstanceId:InstanceId,Health:HealthStatus,State:LifecycleState,AZ:AvailabilityZone}" \
  --output ${2}
}

function get_bucket_size () {
  now=$(date +%s)
  aws cloudwatch get-metric-statistics --namespace AWS/S3 --start-time \
  "$(echo "${now} - 86400" | bc)" --end-time "${now}" --period 86400 \
  --statistics Sum --metric-name BucketSizeBytes \
  --dimensions Name=BucketName,Value=${1} \
  Name=StorageType,Value=StandardStorage --output ${2}
}

function create_menu() {
  if [ ${#name_array[@]} -eq 0 ]; then
    echo -e "${RED}No servers found, exiting...better luck next time...${NC}"
    exit 1;
  else
    echo "Avaliable options:"
    printf "\n"
    for ((i=1; i<=${#name_array[@]}; i++)); do
        printf "%s) %s (%s)\n" "$i" "${name_array[$i-1]}" "${ip_array[$i-1]}"
    done
  fi
  printf "\n"
}

function select_ssh () {
  prompt="Pick a server to SSH to or type 0 to 'quit': "

  while create_menu "${s}" && read -rp "$prompt" num && [[ "$num" ]]; do
    [ "$num" -ne 0 ] || exit 1;
    printf "You selected ${GREEN}${ip_array[num]}${NC}\n";
    ssh -A "${ip_array[num]}"
    break;
  done
}

# Setting long opts to short opts
for arg in "$@"; do
  shift
  case "$arg" in
    "--help")           set -- "$@" "-h" ;;
    "--instance-ip")    set -- "$@" "-i" ;;
    "--instance-info")  set -- "$@" "-I" ;;
    "--instance-type")  set -- "$@" "-t" ;;
    "--asg-count")      set -- "$@" "-a" ;;
    "--asg-info")       set -- "$@" "-A" ;;
    "--s3-size")        set -- "$@" "-b" ;;
    "--ssh")            set -- "$@" "-s" ;;
    "--output")         set -- "$@" "-o" ;;
    *)                  set -- "$@" "$arg"
  esac
done

# Default variables
o="json"
t="*"
OPTIND=1

# Short opts
while getopts ":a:A:b:i:t:I:d:s:o:h" opts; do
  case "${opts}" in
    a)
      a="${OPTARG}"
      if [ -z "${a}" ]; then
        echo -e "${aws_usage}"
      fi
      ;;
    A)
      A="${OPTARG}"
      if [ -z "${A}" ]; then
        echo -e "${aws_usage}"
      fi
      ;;
    i)
      i="${OPTARG}"
      if [ -z "${i}" ]; then
        echo -e "${aws_usage}"
      fi
      ;;
    I)
      I="${OPTARG}"
      if [ -z "${I}" ]; then
        echo -e "${aws_usage}"
      fi
      ;;
    b)
      b="${OPTARG}"
      if [ -z "${b}" ]; then
        echo -e "${aws_usage}"
      fi
      ;;
    s)
      s="${OPTARG}"
      if [ -z "${s}" ]; then
        echo -e "${aws_usage}"
      fi
      ;;
    o) 
      o="${OPTARG}"
      ;;
    t) 
      t="${OPTARG}"
      ;;
    h|*)
      echo -e "${aws_usage}"
      ;;
  esac
done
shift $(expr "${OPTIND}" - 1)

# Check script for args and exit if null
if [ "${OPTIND}" -eq 1 ]; then
  echo "awsmetrics: try 'awsmetrics --help' for more information"
  exit 1
fi

# Get instance ips
if [ "${i}" ]; then
  get_instance_ips "${i}" "${o}"
fi

# Get instance info
if [ "${I}" ]; then
  get_instance_info "${I}" "${o}" "${t}"
fi

# Get instance info
if [ "${a}" ]; then
  get_asg_info "${a}" "${o}"
fi

# Get instance info
if [ "${A}" ]; then
  get_asg_info "${A}" "${o}"
fi

# Get instance info
if [ "${b}" ]; then
  get_bucket_size "${b}" "${o}"
fi

# SSH mode
if [ "${s}" ]; then
  ip_array=( $(get_instance_info "${s}" "text" "${t}" | awk '{print $2}') )
  name_array=( $(get_instance_info "${s}" "text" "${t}" | awk '{print $5}') )
  select_ssh "${s}" "${t}"
fi
